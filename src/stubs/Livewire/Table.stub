<?php

namespace App\Livewire\{{modelNamePluralUpperCase}};

use App\Models\{{modelName}};
use Carbon\Carbon;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Rappasoft\LaravelLivewireTables\Views\Column;
use Rappasoft\LaravelLivewireTables\DataTableComponent;
use Rappasoft\LaravelLivewireTables\Views\Columns\BooleanColumn;

class Table extends DataTableComponent
{

    use LivewireAlert;

    protected $listeners = [
        '{{modelNamePluralLowerCase}}Created' => '$refresh',
        '{{modelNamePluralLowerCase}}Updated' => '$refresh',
        '{{modelNamePluralLowerCase}}Deleted' => '$refresh',
         'confirmed',
        'cancelled',
    ];

    protected $model = {{modelName}}::class;

    public $deleteId = null;

    public function configure(): void
    {
        $this->setSearchLazy();
        $this->setPrimaryKey('id');
        $this->setDefaultSort('id', 'desc');
    }

   {{tableColumnsClass}}



    // edit
    public function edit($id)
    {
        $this->dispatch('openModal',  component: '{{modelView}}.edit', arguments: ['id' => $id]);
    }

    public function triggerConfirm($id)
    {
        $this->deleteId = $id;
        $this->confirm('Do you want to delete?', [
            'toast' => false,
            'position' => 'center',
            'showConfirmButton' => true,
            'cancelButtonText' => 'Cancel',
            'onConfirmed' => 'confirmed',
            'onCancelled' => 'cancelled',
        ]);
    }

    public function confirmed()
    {
        $this->destroy();
        $this->alert( 'success', 'Deleted successfully.');
    }

    public function cancelled()
    {
        $this->alert('info', 'Understood');
    }

    public function destroy()
    {
        if ($this->deleteId) {
            $record = {{modelName}}::where('id', $this->deleteId);
            $record->delete();
            $this->dispatch('{{modelNamePluralLowerCase}}Deleted');
        }
    }

    // approve
    public function approve($id)
    {
        $record = {{modelName}}::find($id);
        $record->update([
            'is_active' => !$record->is_active,
        ]);
        $this->dispatch('{{modelNamePluralLowerCase}}Updated');
    }

}
